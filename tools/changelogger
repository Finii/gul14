#!/bin/sh
#
# Autogenerate the debian/changelog from 'git external tags'
# The output will be further configured by meson
#
# 'git external tags' have the form 'name_M_m_p' where M, m and p are
# positive integers with the semantic version number. name is a non-
# numeric string that is ignored here
# Note that the matching is rather sloppy, this only works when no
# strange tags are created.
# 'Regular' API version tags start with 'v' and are ignored.

# Collect all relevant information
# HEAD, TAGS..., ROOT-commit
allcommits=`git log --format="ref='%H' aut='%an' email='<%ae>' dat='%cD'"`
head=`echo "${allcommits}" | head -n 1`
root=`echo "${allcommits}" | tail -n 1`
tags=`git for-each-ref --shell --sort=-v:refname --format=ref="%(refname) aut=%(taggername) email=%(taggeremail) dat=%(taggerdate:rfc)" 'refs/tags/[^v]*'`

# find out if HEAD is a tagged commit
top_tag=`git for-each-ref --sort=-v:refname --count=1 --format='%(refname)' 'refs/tags/[^v]*'`
patches=`git rev-list ${top_tag}..HEAD --count`
if [ ${patches} -lt 1 ]; then
	patch=''
	entry_begin=`echo ${tags} | head -n 1`
	tags=`echo ${tags} | tail -n +1`
else
	patch="-${patches}"
fi

# prepare for first loop iteration
entry_begin=${head}
eval "${entry_begin}"
# The top entry will get the version number always from meson to make sure we do
# not go wrong, ever. If the following entries have wrong versions this is just
# a cosmetic glitch
header="@NAME@ (@LIBGUL_API_VERSION@${patch}) stable; urgency=low"

printf "${tags}\n${root}\n" | \
while read entry_end; do
	footer=" -- ${aut} ${email}  ${dat}"
	head_ref=${ref}
	eval "${entry_end}"
	printf "${header}\n"
	eval "git log --format='  * %s %d' ${ref}..${head_ref}"
	printf "${footer}\n\n"
	# prepare for next loop iteration
	# (the header of the first iteration is different; it takes direct meson variables)
	version=`echo ${ref} | sed 's/[^0-9]*//;s/[^0-9]/./g'`
	vername=`echo ${ref} | sed 's/[^0-9]*//;s/[^0-9]/-/g'`
	header="@NAME-BASE@-${vername} (${version}) stable; urgency=low"
	head=${entry_end}
done
